package com.prokhorenko;


import java.math.BigInteger;
import java.util.Scanner;

public class Main {
    /*
1. –ù–∞–π–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: z = ( (a ‚Äì 3 ) * b / 2) + c.
     */
    public static double firstLinearTask(double a, double b, double c) {
        return ((a - 3) * b / 2) + c;
    }

    /*
2. –í—ã—á–∏—Å–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ (–≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è):
((b+‚àö(b^2+4ac))/2a)-(a^3)c+(b^(-2))
     */
    public static double secondLinearTask(double a, double b, double c) {
        if (a == 0 || b == 0) {
            System.out.println("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å");
            return -1;
        } else
            return ((b + Math.sqrt(Math.pow(b, 2) + 4 * a * c)) / (2 * a)) - Math.pow(a, 3) * c + Math.pow(b, -2);
    }

    /*
3. –í—ã—á–∏—Å–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ (–≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è):
((ùë†ùëñùëõ ùë• + ùëêùëúùë† ùë¶)/(ùëêùëúùë† ùë• ‚àí ùë†ùëñùëõ ùë¶))*ùë°ùëî ùë•y
     */
    public static double thirdLinerTask(double x, double y) {
        double a = Math.sin(x) + Math.cos(y);
        double b = Math.cos(x) - Math.sin(y);
        if (b == 0) {
            System.out.println("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å");
            return -1;
        } else
            return a / b * Math.tan(x * y);
    }

    /*
4. –î–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ R –≤–∏–¥–∞ nnn.ddd (—Ç—Ä–∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ä–∞–∑—Ä—è–¥–∞ –≤ –¥—Ä–æ–±–Ω–æ–π –∏ —Ü–µ–ª–æ–π —á–∞—Å—Ç—è—Ö). –ü–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏
–¥—Ä–æ–±–Ω—É—é –∏ —Ü–µ–ª—É—é —á–∞—Å—Ç–∏ —á–∏—Å–ª–∞ –∏ –≤—ã–≤–µ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–∞.
     */
    public static void fourthLinearTask(double number) {
        if (number / 1000 > 1 || number / 100 < 1 || number * 10000 % 10 != 0) {
            System.out.println("–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞");
            return;
        }
        double temp = number * 1000 - (int) number * 1000;
        number = (int) number;
        System.out.println(temp + number / 1000);

    }

    /*
5. –î–∞–Ω–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¢, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö. –í—ã–≤–µ—Å—Ç–∏
–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —á–∞—Å–∞—Ö, –º–∏–Ω—É—Ç–∞—Ö –∏ —Å–µ–∫—É–Ω–¥–∞—Ö –≤ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–æ—Ä–º–µ:
–ù–ù—á –ú–ú–º–∏–Ω SSc.
     */
    public static void fifthLinearTask(int seconds) {
        if (seconds < 0) {
            System.out.println("—Å–µ–∫—É–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω–Ω—ã –ø–æ–ª–æ–∂–∏—Ç–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º");
            return;
        }
        int hours = seconds / 3600;
        int minutes = seconds / 60 - hours * 60;
        seconds = seconds - hours * 3600 - minutes * 60;
        if (hours < 10)
            System.out.print(0);
        System.out.print(hours + "—á ");
        if (minutes < 10)
            System.out.print(0);
        System.out.print(minutes + "–º–∏–Ω ");
        if (seconds < 10)
            System.out.print(0);
        System.out.print(seconds + "c");
    }

    /*
6. –î–ª—è –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∏–Ω–µ–π–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—á–∞—Ç–∞–µ—Ç true, –µ—Å–ª–∏ —Ç–æ—á–∫–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (—Ö, —É)
–ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∑–∞–∫—Ä–∞—à–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏, –∏ false ‚Äî –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ:
—Å–º. —Ä–∏—Å—É–Ω–æ–∫ –Ω–∞ –≥–∏—Ç—Ö–∞–±–µ.
     */
    public static void sixLinearTask(int x, int y) {
        if ((y > 0 && y < 5 && x > -3 && x < 3) || (y < 0 && y > -4 && x > -5 && x < 5))
            System.out.println(true);
        else
            System.out.println(false);
    }

    /*
1. –î–∞–Ω—ã –¥–≤–∞ —É–≥–ª–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö). –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫, –∏ –µ—Å–ª–∏ –¥–∞, —Ç–æ –±—É–¥–µ—Ç –ª–∏
–æ–Ω –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–º.
     */
    public static boolean firstBranchingTask(int a, int b) {
        if (a > 0 && b > 0 && a + b < 180) {
            System.out.println("–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
            if (a == 90 || b == 90 || a + b == 90)
                System.out.println("–û–Ω –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π");
            return true;

        }
        System.out.println("–ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        return false;
    }

    /*
2. –ù–∞–π—Ç–∏ max{min(a, b), min(c, d)}.
     */
    public static int secondBranchingTask(int a, int b, int c, int d) {
        return max(min(a, b), min(c, d));
    }

    public static int min(int a, int b) {
        if (a >= b) {
            return b;
        } else return a;
    }

    public static int max(int a, int b) {
        if (a >= b) {
            return a;
        } else return b;
    }

    /*
3. –î–∞–Ω—ã —Ç—Ä–∏ —Ç–æ—á–∫–∏ –ê(—Ö1,—É1), –í(—Ö2,—É2) –∏ –°(—Ö3,—É3). –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –±—É–¥—É—Ç –ª–∏ –æ–Ω–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –Ω–∞ –æ–¥–Ω–æ–π –ø—Ä—è–º–æ–π.
     */
    public static boolean thirdBranchingTask(int x1, int y1, int x2, int y2, int x3, int y3) {
        if (((x2 - x1) * (y3 - y1)) - ((y2 - y1) * (x3 - x1)) == 0)
            return true;
        else
            return false;
    }

    /*
4. –ó–∞–¥–∞–Ω—ã —Ä–∞–∑–º–µ—Ä—ã –ê, –í –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ä—Å—Ç–∏—è –∏ —Ä–∞–∑–º–µ—Ä—ã —Ö, —É, z –∫–∏—Ä–ø–∏—á–∞. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –ø—Ä–æ–π–¥–µ—Ç –ª–∏ –∫–∏—Ä–ø–∏—á —á–µ—Ä–µ–∑
–æ—Ç–≤–µ—Ä—Å—Ç–∏–µ.
–ú–µ—Ç–æ–¥—ã –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–∑ –¥–≤—É—Ö –∑–Ω–∞—á–µ–Ω–∏–π –æ–ø–∏—Å–∞–Ω—ã –≤ –∑–∞–¥–∞—á–µ 2(–í–µ—Ç–≤–ª–µ–Ω–∏—è)
     */
    public static boolean fourthBranchingTask(int a, int b, int x, int y, int z) {
        int minAB = min(a, b);
        int minXY = min(x, y);
        int minXZ = min(x, z);
        int maxAB = max(a, b);
        int maxXY = max(x, y);
        int maxXZ = max(x, z);
        if (a > 0 && b > 0 && x > 0 && y > 0 && z > 0 && min(minXY, minXZ) < minAB && min(maxXY, maxXZ) < maxAB)
            return true;
        return false;
    }
    /*
5. –í—ã—á–∏—Å–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
          x^2-3x+9, –µ—Å–ª–∏ —Ö<=3
F(x)=
          1/((x^3)+6), –µ—Å–ª–∏ x>3
     */

    public static double fifthBranchingTask(double x) {
        if (x <= 3)
            return x * x - x * 3 + 9;
        else return 1 / (Math.pow(x, 3) + 6);
    }

    /*
1. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ª—é–±–æ–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ê –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å—É–º–º–∏—Ä—É–µ—Ç
–≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–∏—Å–ª–∞.
     */
    public static void firstCycleTask() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ");
        int x = scanner.nextInt();
        int sum = 0;
        for (int i = 1; i <= x; i++)
            sum += i;
        System.out.println(sum);
    }

    /*
2. –í—ã—á–∏—Å–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –æ—Ç—Ä–µ–∑–∫–µ [–∞,b] c —à–∞–≥–æ–º h:
    x, x>2
y =
    -x, x<=2
     */
    public static void secondCycleTask(int a, int b, int h) {
        for (int i = a; i <= b; i += h) {
            int temp = i;
            if (temp <= 2)
                temp = -temp;
            System.out.println(temp);
        }
    }

    /*
3. –ù–∞–π—Ç–∏ —Å—É–º–º—É –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –ø–µ—Ä–≤—ã—Ö —Å—Ç–∞ —á–∏—Å–µ–ª.
     */
    public static void thirdCycleTask() {
        int sum = 0;
        for (int i = 1; i <= 100; i++) {
            sum += i * i;
        }
        System.out.println(sum);
    }

    /*
4. –°–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö—Å–æ—Ç —á–∏—Å–µ–ª
     */
    public static void fourthCycleTask() {
        BigInteger result = new BigInteger("1");
        for (int i = 2; i <= 200; i++) {
            Integer z = i * i;
            BigInteger bigInteger = new BigInteger(z.toString());
            result = result.multiply(bigInteger);

        }
        System.out.println(result);

    }

    /*
5. –î–∞–Ω—ã —á–∏—Å–ª–æ–≤–æ–π —Ä—è–¥ –∏ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ –µ. –ù–∞–π—Ç–∏ —Å—É–º–º—É —Ç–µ—Ö —á–ª–µ–Ω–æ–≤ —Ä—è–¥–∞, –º–æ–¥—É–ª—å –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω
–∑–∞–¥–∞–Ω–Ω–æ–º—É –µ. –û–±—â–∏–π —á–ª–µ–Ω —Ä—è–¥–∞ –∏–º–µ–µ—Ç –≤–∏–¥:

a[n]=(1/(2^n))+(1/(3^n))
     */
    public static void fifthCycleTask(double e, int n) {
        double sum = 0;
        for (int i = 1; Math.abs(i) <= Math.abs(n); ) {
            if (n < 0) {
                i--;
            } else i++;
            System.out.println(Math.abs(n));
            double a = 1 / Math.pow(2, i) + 1 / Math.pow(3, i);
            if (Math.abs(a) >= e)
                sum += a;
        }
        System.out.println(sum);
    }

    /*
6. –í—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏ –∏ –∏—Ö —á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ –ø–∞–º—è—Ç–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.
     */
    public static void sixCycleTask() {
        char c;
        for (int i = 33; i < 128; i++) {
            c = (char) i;
            System.out.println(c + " - " + i);
        }
    }

    /*
    7. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –æ—Ç m –¥–æ n –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –¥–µ–ª–∏—Ç–µ–ª–∏, –∫—Ä–æ–º–µ –µ–¥–∏–Ω–∏—Ü—ã –∏ —Å–∞–º–æ–≥–æ —á–∏—Å–ª–∞.
m –∏ n –≤–≤–æ–¥—è—Ç—Å—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
     */
    public static void sevenCycleTask() {
        int m;
        int n;
        Scanner scanner = new Scanner(System.in);
        System.out.println("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ m");
        m = scanner.nextInt();
        while (m <= 0) {
            System.out.println("–ù–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –≤–≤–µ–¥–∏ –¥—Ä—É–≥–æ–µ");
            m = scanner.nextInt();
        }
        System.out.println("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ n");
        n = scanner.nextInt();
        while (n <= 0) {
            System.out.println("–ù–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –≤–≤–µ–¥–∏ –¥—Ä—É–≥–æ–µ");
            n = scanner.nextInt();
        }
        int max = max(m, n);
        int min = min(m, n);
        for (int i = max / 2; i > 1; i--) {
            if (max % i == 0 && min % i == 0)
                System.out.println(i);
        }
    }


    /*
8. –î–∞–Ω—ã –¥–≤–∞ —á–∏—Å–ª–∞. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–∏—Ñ—Ä—ã, –≤—Ö–æ–¥—è—â–∏–µ –≤ –∑–∞–ø–∏—Å—å –∫–∞–∫ –ø–µ—Ä–≤–æ–≥–æ —Ç–∞–∫ –∏ –≤—Ç–æ—Ä–æ–≥–æ —á–∏—Å–ª–∞
     */
    public static void eightCycleTask(int first, int second) {
        String firstString = uni(first);
        String secondString = uni(second);
        first = Integer.parseInt(firstString);
        second = Integer.parseInt(secondString);
        for (int i = 0; i < firstString.length(); i++) {
            int temp = second;
            for (int j = 0; j < secondString.length(); j++) {
                if (first % 10 == temp % 10) {
                    System.out.println(first % 10);
                    break;
                }
                temp /= 10;
            }
            first /= 10;
        }
    }

    /*
    –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–µ—Ç —Å—Ç—Ä–æ–∫—É –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ pos
     */
    public static String removeCharAt(String s, int pos) {
        return s.substring(0, pos) + s.substring(pos + 1);
    }
/*
–ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ü–∏—Ñ—Ä, —Ç.–µ. –≤—Å–µ —Ü–∏—Ñ—Ä—ã –≤ —á–∏—Å–ª–µ –≤ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è

 */

    public static String uni(int n) {
        String s = "" + n;
        String sum = "";
        for (int i = 0; i < s.length(); i++) {
            sum += s.charAt(i);
            for (int j = i + 1; j < s.length(); j++) {
                if (s.charAt(i) == s.charAt(j)) {
                    s = removeCharAt(s, j);
                    j--;
                }

            }
        }
        return sum;
    }


    public static void main(String[] args) {
        sevenCycleTask();
    }

}
